/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BBC News Api Swagger
 * BBC News Api Description
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  Level2CategoryControllerGetLevel2CategoriesParams,
  ScrapDelReq,
  ScrapDto,
} from './schemas';

export const level2CategoryControllerGetLevel2Categories = (
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`/level2categories`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getLevel2CategoryControllerGetLevel2CategoriesQueryKey = (
  params: Level2CategoryControllerGetLevel2CategoriesParams,
) => {
  return [`/level2categories`, ...(params ? [params] : [])] as const;
};

export const getLevel2CategoryControllerGetLevel2CategoriesQueryOptions = <
  TData = Awaited<
    ReturnType<typeof level2CategoryControllerGetLevel2Categories>
  >,
  TError = AxiosError<unknown>,
>(
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getLevel2CategoryControllerGetLevel2CategoriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>
  > = ({ signal }) =>
    level2CategoryControllerGetLevel2Categories(params, {
      signal,
      ...axiosOptions,
    });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type Level2CategoryControllerGetLevel2CategoriesQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>
  >;
export type Level2CategoryControllerGetLevel2CategoriesQueryError =
  AxiosError<unknown>;

export function useLevel2CategoryControllerGetLevel2Categories<
  TData = Awaited<
    ReturnType<typeof level2CategoryControllerGetLevel2Categories>
  >,
  TError = AxiosError<unknown>,
>(
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof level2CategoryControllerGetLevel2Categories>
          >,
          TError,
          Awaited<
            ReturnType<typeof level2CategoryControllerGetLevel2Categories>
          >
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLevel2CategoryControllerGetLevel2Categories<
  TData = Awaited<
    ReturnType<typeof level2CategoryControllerGetLevel2Categories>
  >,
  TError = AxiosError<unknown>,
>(
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof level2CategoryControllerGetLevel2Categories>
          >,
          TError,
          Awaited<
            ReturnType<typeof level2CategoryControllerGetLevel2Categories>
          >
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useLevel2CategoryControllerGetLevel2Categories<
  TData = Awaited<
    ReturnType<typeof level2CategoryControllerGetLevel2Categories>
  >,
  TError = AxiosError<unknown>,
>(
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useLevel2CategoryControllerGetLevel2Categories<
  TData = Awaited<
    ReturnType<typeof level2CategoryControllerGetLevel2Categories>
  >,
  TError = AxiosError<unknown>,
>(
  params: Level2CategoryControllerGetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof level2CategoryControllerGetLevel2Categories>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getLevel2CategoryControllerGetLevel2CategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const scrapControllerScrap = (
  scrapDto: ScrapDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`/scrap`, scrapDto, options);
};

export const getScrapControllerScrapMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scrapControllerScrap>>,
    TError,
    { data: ScrapDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scrapControllerScrap>>,
  TError,
  { data: ScrapDto },
  TContext
> => {
  const mutationKey = ['scrapControllerScrap'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scrapControllerScrap>>,
    { data: ScrapDto }
  > = (props) => {
    const { data } = props ?? {};

    return scrapControllerScrap(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScrapControllerScrapMutationResult = NonNullable<
  Awaited<ReturnType<typeof scrapControllerScrap>>
>;
export type ScrapControllerScrapMutationBody = ScrapDto;
export type ScrapControllerScrapMutationError = AxiosError<unknown>;

export const useScrapControllerScrap = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scrapControllerScrap>>,
      TError,
      { data: ScrapDto },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scrapControllerScrap>>,
  TError,
  { data: ScrapDto },
  TContext
> => {
  const mutationOptions = getScrapControllerScrapMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const scrapControllerDelete = (
  scrapDelReq: ScrapDelReq,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/scrap`, { data: scrapDelReq, ...options });
};

export const getScrapControllerDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scrapControllerDelete>>,
    TError,
    { data: ScrapDelReq },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scrapControllerDelete>>,
  TError,
  { data: ScrapDelReq },
  TContext
> => {
  const mutationKey = ['scrapControllerDelete'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scrapControllerDelete>>,
    { data: ScrapDelReq }
  > = (props) => {
    const { data } = props ?? {};

    return scrapControllerDelete(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScrapControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof scrapControllerDelete>>
>;
export type ScrapControllerDeleteMutationBody = ScrapDelReq;
export type ScrapControllerDeleteMutationError = AxiosError<unknown>;

export const useScrapControllerDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scrapControllerDelete>>,
      TError,
      { data: ScrapDelReq },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scrapControllerDelete>>,
  TError,
  { data: ScrapDelReq },
  TContext
> => {
  const mutationOptions = getScrapControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
