/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BBC News Api Swagger
 * BBC News Api Description
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { GetLevel2CategoriesParams } from './schemas';

import { customInstance } from '../plugins/customInstance';
import type { ErrorType } from '../plugins/customInstance';

/**
 * Fetches Level 2 categories based on the provided category parameter.
 * @summary Get Level 2 Categories
 */
export const getLevel2Categories = (
  params: GetLevel2CategoriesParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `http://localhost:8080/level2categories`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetLevel2CategoriesQueryKey = (
  params: GetLevel2CategoriesParams,
) => {
  return [
    `http://localhost:8080/level2categories`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetLevel2CategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getLevel2Categories>>,
  TError = ErrorType<unknown>,
>(
  params: GetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLevel2Categories>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLevel2CategoriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLevel2Categories>>
  > = ({ signal }) => getLevel2Categories(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLevel2Categories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLevel2CategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLevel2Categories>>
>;
export type GetLevel2CategoriesQueryError = ErrorType<unknown>;

export function useGetLevel2Categories<
  TData = Awaited<ReturnType<typeof getLevel2Categories>>,
  TError = ErrorType<unknown>,
>(
  params: GetLevel2CategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLevel2Categories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLevel2Categories>>,
          TError,
          Awaited<ReturnType<typeof getLevel2Categories>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLevel2Categories<
  TData = Awaited<ReturnType<typeof getLevel2Categories>>,
  TError = ErrorType<unknown>,
>(
  params: GetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLevel2Categories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLevel2Categories>>,
          TError,
          Awaited<ReturnType<typeof getLevel2Categories>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLevel2Categories<
  TData = Awaited<ReturnType<typeof getLevel2Categories>>,
  TError = ErrorType<unknown>,
>(
  params: GetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLevel2Categories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Level 2 Categories
 */

export function useGetLevel2Categories<
  TData = Awaited<ReturnType<typeof getLevel2Categories>>,
  TError = ErrorType<unknown>,
>(
  params: GetLevel2CategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getLevel2Categories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLevel2CategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
