/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * BBC News Api Swagger
 * BBC News Api Description
 * OpenAPI spec version: 0.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type { ScrapDelReq, ScrapDto } from './schemas';

import { customInstance } from '../plugins/customInstance';
import type { ErrorType } from '../plugins/customInstance';

/**
 * Saves an article and its associated information.
 * @summary Create a new scrap
 */
export const scrapPost = (scrapDto: ScrapDto, signal?: AbortSignal) => {
  return customInstance<void>({
    url: `http://localhost:8080/scrap`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: scrapDto,
    signal,
  });
};

export const getScrapPostMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scrapPost>>,
    TError,
    { data: ScrapDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scrapPost>>,
  TError,
  { data: ScrapDto },
  TContext
> => {
  const mutationKey = ['scrapPost'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scrapPost>>,
    { data: ScrapDto }
  > = (props) => {
    const { data } = props ?? {};

    return scrapPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScrapPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof scrapPost>>
>;
export type ScrapPostMutationBody = ScrapDto;
export type ScrapPostMutationError = ErrorType<unknown>;

/**
 * @summary Create a new scrap
 */
export const useScrapPost = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scrapPost>>,
      TError,
      { data: ScrapDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scrapPost>>,
  TError,
  { data: ScrapDto },
  TContext
> => {
  const mutationOptions = getScrapPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Deletes an article and its associated information.
 * @summary Delete a scrap
 */
export const scrapDelete = (scrapDelReq: ScrapDelReq) => {
  return customInstance<void>({
    url: `http://localhost:8080/scrap`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: scrapDelReq,
  });
};

export const getScrapDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scrapDelete>>,
    TError,
    { data: ScrapDelReq },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scrapDelete>>,
  TError,
  { data: ScrapDelReq },
  TContext
> => {
  const mutationKey = ['scrapDelete'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scrapDelete>>,
    { data: ScrapDelReq }
  > = (props) => {
    const { data } = props ?? {};

    return scrapDelete(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScrapDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof scrapDelete>>
>;
export type ScrapDeleteMutationBody = ScrapDelReq;
export type ScrapDeleteMutationError = ErrorType<unknown>;

/**
 * @summary Delete a scrap
 */
export const useScrapDelete = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scrapDelete>>,
      TError,
      { data: ScrapDelReq },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scrapDelete>>,
  TError,
  { data: ScrapDelReq },
  TContext
> => {
  const mutationOptions = getScrapDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
